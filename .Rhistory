DOTideData$`PGB-DO`[DOTideData$`PG-Tide` <= 1] <- NA #Replace PGB-DO values with "NA" when tide is less than 1
DOTideData$`CIE-DO`[DOTideData$`CI-Tide` <= 1] <- NA #Replace CIE-DO values with "NA" when tide is less than 1
DOTideData$`CIB-DO`[DOTideData$`CI-Tide` <= 1] <- NA #Replace CIB-DO values with "NA" when tide is less than 1
DOTideData$`FBE-DO`[DOTideData$`FB-Tide` <= 1] <- NA #Replace FBE-DO values with "NA" when tide is less than 1
DOTideData$`FBB-DO`[DOTideData$`FB-Tide` <= 1] <- NA #Replace FBB-DO values with "NA" when tide is less than 1
#Convert to numeric values
DOTideData$`WBE-DO` <- as.numeric(DOTideData$`WBE-DO`)
DOTideData$`WBB-DO` <- as.numeric(DOTideData$`WBB-DO`)
DOTideData$`SKE-DO` <- as.numeric(DOTideData$`SKE-DO`)
DOTideData$`SKB-DO` <- as.numeric(DOTideData$`SKB-DO`)
DOTideData$`PGE-DO` <- as.numeric(DOTideData$`PGE-DO`)
DOTideData$`PGB-DO` <- as.numeric(DOTideData$`PGB-DO`)
DOTideData$`CIE-DO` <- as.numeric(DOTideData$`CIE-DO`)
DOTideData$`CIB-DO` <- as.numeric(DOTideData$`CIB-DO`)
DOTideData$`FBE-DO` <- as.numeric(DOTideData$`FBE-DO`)
DOTideData$`FBB-DO` <- as.numeric(DOTideData$`FBB-DO`)
colnames(salinityTideData)
salinityTideData$`CIB-Salinity`[salinityTideData$`CIB-Salinity` <= 1] <- NA #Replace CIB-Salinity values with "NA" when tide is less than 1
salinityTideData$`CIE-Salinity`[salinityTideData$`CIB-Salinity` <= 1] <- NA #Replace CIB-Salinity values with "NA" when tide is less than 1
salinityTideData$`FBB-Salinity`[salinityTideData$`FB-Salinity` <= 1] <- NA #Replace FBB-Salinity values with "NA" when tide is less than 1
salinityTideData$`FBE-Salinity`[salinityTideData$`FB-Salinity` <= 1] <- NA #Replace FBE-Salinity values with "NA" when tide is less than 1
salinityTideData$`PGE-Salinity`[salinityTideData$`PG-Salinity` <= 1] <- NA #Replace PGE-Salinity values with "NA" when tide is less than 1
salinityTideData$`SKB-Salinity`[salinityTideData$`SK-Salinity` <= 1] <- NA #Replace SKB-Salinity values with "NA" when tide is less than 1
salinityTideData$`SKE-Salinity`[salinityTideData$`SK-Salinity` <= 1] <- NA #Replace SKE-Salinity values with "NA" when tide is less than 1
salinityTideData$`WBB-Salinity`[salinityTideData$`WB-Salinity` <= 1] <- NA #Replace WBB-Salinity values with "NA" when tide is less than 1
#Convert to numeric values
salinityTideData$`CIB-Salinity` <- as.numeric(salinityTideData$`CIB-Salinity`)
salinityTideData$`CIE-Salinity` <- as.numeric(salinityTideData$`CIE-Salinity`)
salinityTideData$`FBB-Salinity` <- as.numeric(salinityTideData$`FBB-Salinity`)
salinityTideData$`FBE-Salinity` <- as.numeric(salinityTideData$`FBE-Salinity`)
salinityTideData$`PGE-Salinity` <- as.numeric(salinityTideData$`PGE-Salinity`)
salinityTideData$`SKB-Salinity` <- as.numeric(salinityTideData$`SKB-Salinity`)
salinityTideData$`SKE-Salinity` <- as.numeric(salinityTideData$`SKE-Salinity`)
salinityTideData$`WBB-Salinity` <- as.numeric(salinityTideData$`WBB-Salinity`)
nSites <- 17 #Sites are from columns 4 to 17
for(i in 4:nSites) { #For individual site-habitat data
upperBound <- as.numeric((quantile(pHTideData[, i], na.rm = TRUE)[4]) + (1.5*(quantile(pHTideData[, i], na.rm = TRUE)[4] - quantile(pHTideData[, i], na.rm = TRUE)[2]))) #Calculate upper bound
lowerBound <- as.numeric((quantile(pHTideData[, i], na.rm = TRUE)[2]) - (1.5*(quantile(pHTideData[, i], na.rm = TRUE)[4] - quantile(pHTideData[, i], na.rm = TRUE)[2]))) #Calculate lower bound
pHTideData[, i][pHTideData[, i] > upperBound] <- NA #Replace any values higher than upper bound with NA
pHTideData[, i][pHTideData[, i] < lowerBound] <- NA #Replace any values lower than upper bound with NA
} #Replace outliers with NA values
nSites <- 18 #Sites are from columns 4 to 18
for(i in 4:nSites) { #For individual site data
upperBound <- as.numeric((quantile(DOTideData[, i], na.rm = TRUE)[4]) + (1.5*(quantile(DOTideData[, i], na.rm = TRUE)[4] - quantile(DOTideData[, i], na.rm = TRUE)[2]))) #Calculate upper bound
lowerBound <- 0 #Dissolved oxygen content cannot be less than zero
DOTideData[, i][DOTideData[, i] > upperBound] <- NA #Replace any values higher than upper bound with NA
DOTideData[, i][DOTideData[, i] < lowerBound] <- NA #Replace any values lower than upper bound with NA
} #Replace outliers with NA values
nSites <- 16 #Sites are from columns 4 to 16
for(i in 4:nSites) { #For individual site data
upperBound <- as.numeric((quantile(salinityTideData[, i], na.rm = TRUE)[4]) + (1.5*(quantile(salinityTideData[, i], na.rm = TRUE)[4] - quantile(salinityTideData[, i], na.rm = TRUE)[2]))) #Calculate upper bound
lowerBound <- as.numeric((quantile(salinityTideData[, i], na.rm = TRUE)[2]) - (1.5*(quantile(salinityTideData[, i], na.rm = TRUE)[4] - quantile(salinityTideData[, i], na.rm = TRUE)[2]))) #Calculate lower bound
salinityTideData[, i][salinityTideData[, i] > upperBound] <- NA #Replace any values higher than upper bound with NA
salinityTideData[, i][salinityTideData[, i] < lowerBound] <- NA #Replace any values lower than upper bound with NA
} #Replace outliers with NA values
#write.csv(pHTideData, "2018-11-18-pH-Tide-Data-Corrected.csv") #Export pH data
#write.csv(DOTideData, "2018-11-18-DO-Tide-Data-Corrected.csv") #Export DO data
#write.csv(salinityTideData, "2018-11-18-Salinity-Tide-Data-Corrected.csv") #Export salinity data
#write.csv(temperatureData, "2018-11-18-Temperature-Corrected.csv") #Export temperature data
outplantDates <- as.Date(unique(temperatureData$Date)) #Save outplant dates as a new vector
outplantDates #Confirm vector creation
head(pHTideData)
pHMean <- data.frame("Date" = outplantDates,
"WBE-pH-mean" = rep(0, length(outplantDates)),
"WBB-pH-mean" = rep(0, length(outplantDates)),
"SKE-pH-mean" = rep(0, length(outplantDates)),
"SKB-pH-mean" = rep(0, length(outplantDates)),
"PGB-pH-mean" = rep(0, length(outplantDates)),
"CIE-pH-mean" = rep(0, length(outplantDates)),
"CIB-pH-mean" = rep(0, length(outplantDates)),
"FBE-pH-mean" = rep(0, length(outplantDates)),
"FBB-pH-mean"  = rep(0, length(outplantDates))) #Create an empty dataframe
head(pHMean)
nDates <- length(outplantDates)
for (j in 4:12) { #For each column with pH data
for(i in 1:nDates) { #For each date
pHMean[i, j-2] <- mean(pHTideData[pHTideData$Date == outplantDates[i], j], na.rm = TRUE) #Find and save the mean value of the designated column at each date.
}
} #The loop will cycle through each date first in one column, then move to the next column. Any days with no non-missing data will save as "NaN" in the dataframe.
is.na(pHMean) <- sapply(pHMean, is.nan) #Replace all "NaN" with N/A
head(pHMean) #Confirm dataframe filling. All "NaN" values are now replaced with N/A.
head(DOTideData)
DOMean <- data.frame("Date" = outplantDates,
"WBE-DO-mean" = rep(0, length(outplantDates)),
"WBB-DO-mean" = rep(0, length(outplantDates)),
"SKE-DP-mean" = rep(0, length(outplantDates)),
"SKB-DO-mean" = rep(0, length(outplantDates)),
"PGE-DO-mean" = rep(0, length(outplantDates)),
"PGB-DO-mean" = rep(0, length(outplantDates)),
"CIE-DO-mean" = rep(0, length(outplantDates)),
"CIB-DO-mean" = rep(0, length(outplantDates)),
"FBE-DO-mean" = rep(0, length(outplantDates)),
"FBB-DO-mean" = rep(0, length(outplantDates))) #Create an empty dataframe
head(DOMean)
for (j in 4:13) { #For each column with DO data
for(i in 1:nDates) { #For each date
DOMean[i, j-2] <- mean(DOTideData[DOTideData$Date == outplantDates[i], j], na.rm = TRUE) #Find and save the mean value of the designated column at each date.
}
} #The loop will cycle through each date first in one column, then move to the next column. Any days with no non-missing data will save as "NaN" in the dataframe.
is.na(DOMean) <- sapply(DOMean, is.nan) #Replace all "NaN" with N/A
head(DOMean) #Confirm dataframe filling. All "Inf" values are now replaced
head(salinityTideData)
salinityMean <- data.frame("Date" = outplantDates,
"CIB-sal-mean" = rep(0, length(outplantDates)),
"CIE-sal-mean" = rep(0, length(outplantDates)),
"FBB-sal-mean" = rep(0, length(outplantDates)),
"FBE-sal-mean" = rep(0, length(outplantDates)),
"PGE-sal-mean" = rep(0, length(outplantDates)),
"SKB-sal-mean" = rep(0, length(outplantDates)),
"SKE-sal-mean" = rep(0, length(outplantDates)),
"WBB-sal-mean" = rep(0, length(outplantDates))) #Create an empty dataframe
head(salinityMean)
for (j in 4:11) { #For each column with salinity data
for(i in 1:nDates) { #For each date
salinityMean[i, j-2] <- mean(salinityTideData[salinityTideData$Date == outplantDates[i], j], na.rm = TRUE) #Find and save the mean value of the designated column at each date.
}
} #The loop will cycle through each date first in one column, then move to the next column. Any days with no non-missing data will save as "NaN" in the dataframe.
is.na(salinityMean) <- sapply(salinityMean, is.nan) #Replace all "NaN" with N/A
head(salinityMean) #Confirm dataframe filling. All "NaN" values are now replaced
head(temperatureData)
outplantDateCharacters <- as.character(outplantDates) #Convert outplant dates to characters
temperatureData$DateCharacters <- as.character(temperatureData$Date) #Convert dates to characters
temperatureMean <- data.frame("Date" = outplantDateCharacters,
"WBE-temp-mean" = rep(0, length(outplantDates)),
"WBB-temp-mean" = rep(0, length(outplantDates)),
"SKE-temp-mean" = rep(0, length(outplantDates)),
"SKB-temp-mean" = rep(0, length(outplantDates)),
"PGE-temp-mean" = rep(0, length(outplantDates)),
"PGB-temp-mean" = rep(0, length(outplantDates)),
"CIE-temp-mean" = rep(0, length(outplantDates)),
"CIB-temp-mean" = rep(0, length(outplantDates)),
"FBE-temp-mean" = rep(0, length(outplantDates)),
"FBB-temp-mean" = rep(0, length(outplantDates))) #Create an empty dataframe, but be sure to use outplantDateCharacters
head(temperatureMean)
for (j in 3:12) { #For each column with temperature data
for(i in 1:nDates) { #For each date
temperatureMean[i, j-1] <- mean(temperatureData[temperatureData$DateCharacters == outplantDateCharacters[i], j], na.rm = TRUE) #Find and save the mean value of the designated column at each date.
}
} #The loop will cycle through each date first in one column, then move to the next column. Any days with no non-missing data will save as "Inf" in the dataframe.
is.na(temperatureMean) <- sapply(temperatureMean, is.nan) #Replace all "NaN" with N/A
head(temperatureMean) #Confirm dataframe filling. All "NaN" values are now replaced
temperatureMean$Date <- outplantDates #Replace temperatureMean$Date with outplantDates so they are dates
head(temperatureMean)
dailyMeanData <- cbind(pHMean, DOMean, salinityMean, temperatureMean) #Use cbind to merge all of the dataframes together
colnames(dailyMeanData) #View column names
dailyMeanData <- dailyMeanData[,-c(11, 22, 31)] #Remove all redundant "Date" columns
colnames(dailyMeanData) #Confirm column removal
dailyMeanDataCorrected <- dailyMeanData #Duplicate dataframe
rownames(dailyMeanDataCorrected) <- dailyMeanDataCorrected$Date #Save dates as rownames
dailyMeanDataCorrected <- dailyMeanDataCorrected[, -1] #Remove date column
head(dailyMeanDataCorrected) #Confirm changes
meanData.log <- log(dailyMeanDataCorrected + 1) #Log transform data before analysis
meanData.log <- meanData.log[-c(32:34),] #Remove last three rows since the outplant ended before then
tail(meanData.log)
meanData.log.trans <- data.frame(t(meanData.log)) #Transpose dataframe so objects are environmental conditions at site-habitat combinations, and descriptors are dates. This is the data I will use for the NMDS.
colnames(meanData.log.trans) <- rownames(meanData.log) #Rename columns so there is no "X" in front of dates
head(meanData.log.trans) #View transformation
#write.csv(meanData.log.trans, "2018-12-01-Mean-Environmental-Data-Log-Transformed.csv", row.names = TRUE) #Write out transformed data for future analyses
meanDataGowerDiss <- daisy(meanData.log.trans, metric = "gower") #Calculate a dissimilarity (distance) matrix based on Gower's coefficient. Since vegan cannot handle missing values, use the daisy function from the cluster library to calculate the dissimilarity matrix to use in all vegan functions.
meanDataGowerDiss #Confirm matrix calculation
nmds.scree(meanDataGowerDiss, distance = "euclidean", k = 10, autotransform = FALSE, trymax = 20) #Create a screeplot to compare the stress for solutions across different k values from 2 to 10. Use 20 different random start configurations. As the number of ordination axes increases, stress is minimized because the NMDS algorithm is trying to represent p dimensional data in k dimensions. There is an elbow at 2 ordination axes, which tells me that 2 axes should suffice for the analysis.
meanData.log.gower.NMDS <- metaMDS(meanDataGowerDiss, distance = 'euclidean', k = 2, trymax = 10000, autotransform = FALSE) #Make MDS dissimilarity matrix on log transformed data using Gower's.
meanData.log.gower.NMDS$stress #Stress = 0.01740668
#Use code from Jennifer Gardner to define a new function, nmds.montejg, to calculate a p-value with a permutation test for missing data.
nmds.montejg <-
function(dissim,rawdata,k,nmds.distance='bray',daisy.distance='gower', trymax=50,autotransform=FALSE,
trace=0,zerodist='add',perm=99,col.hist='blue',col.line='red',
lty=2,las=1,lab=c(5,5,4),...){
library(vegan)
library(MASS)
z<-metaMDS(comm=dissim,k=k,distance=nmds.distance,trymax=trymax,
autotransform=autotransform,trace=trace,...) #nmds analysis on dissimilarity matrix
z.stress<-z$stress #get stress
y.stress<-rep(0,perm)
for(i in 1:perm){
y<-apply(rawdata,2,sample) #permute raw data matrix
y<- daisy(y, metric = daisy.distance) # calculate gower's for permuted data
y<-metaMDS(comm=y,k=k,distance=nmds.distance,trymax=trymax,
autotransform=autotransform,trace=trace,...) #nmds analysis on dissimilarity matrix
y.stress[i]<-y$stress #get stress
}
n<-sum(y.stress<=z.stress) #compute number of random runs with stress < observed
p.value<-(1+n)/(1+perm) #compute p-value
xmin<-min(z.stress,min(y.stress))
xmax<-max(z.stress,max(y.stress))
hist(y.stress,col=col.hist,las=las,lab=lab,
xaxs='i',yaxs='i',xlim=c(xmin,xmax),xlab='Stress',
main=paste('Random Permutation Distribution of Stress for',k,'Dimensions',sep=' '),...)
abline(v=z.stress,col=col.line,lty=lty,lwd=2,...)
cat('Randomization Test of Stress:\n')
cat('Permutation stress values:\n')
print(y.stress)
z<-rbind('Observed stress'=z.stress,'P-value'=p.value,'Times Permute Less Than Observed'=n)
return(z)
}
nmds.montejg(dissim = meanDataGowerDiss, rawdata = meanData.log.trans, nmds.distance = 'euclidean', k = 2, autotransform = FALSE, trymax = 20) #Perform a randomization test to determine if the solution for 2 dimensions is significant. The observed stress value is less than the expected stress value. P-value = 0.01000000
stressplot(meanData.log.gower.NMDS) #Make Shepard plot to visualize the relationship between original dissimilarities (distance matrix) and distnaces in ordination space. The non-metric R-squared value is 1 (redundant with observed stress value and p-value from the randomization test)
vec.meanData.log.gower <- envfit(meanData.log.gower.NMDS$points, meanData.log.trans, perm = 1000, na.rm = TRUE) #Calculate loadings by correlating NMDS scores with original variables
vec.meanData.log.gower #Look at loadings. All are equally significant.
ordiplot(meanData.log.gower.NMDS, choices = c(1,2), type = "text", display = "sites", xlab = "Axis 1", ylab = "Axis 2") #Plot basic NMDS
plot(vec.meanData.log.gower, p.max = 0.001, col = 'blue') #Plot loadings that are significant at the 0.001 level
plotCustomization <- data.frame("Site" = rep(0, times = length(meanData.log.trans$`2016-06-19`)),
"Habitat" = rep(0, times = length(meanData.log.trans$`2016-06-19`)),
"Site-Habitat" = rep(0, times = length(meanData.log.trans$`2016-06-19`)),
"Shape" = rep(0, times = length(meanData.log.trans$`2016-06-19`)),
"Color" = rep(0, times = length(meanData.log.trans$`2016-06-19`)),
"Shape2" = rep(0, times = length(meanData.log.trans$`2016-06-19`))) #Create a new dataframe to store plot customization information
rownames(plotCustomization) <- rownames(meanData.log.trans) #Use rownames from NMDS data as rownames for the customization information
head(plotCustomization) #Confirm creation
plotCustomization[grep(rownames(plotCustomization), pattern = "CI"), "Site"] <- "CI" #For each rowname with "CI", add "CI" to the site column
plotCustomization[grep(rownames(plotCustomization), pattern = "FB"), "Site"] <- "FB" #For each rowname with "FB", add "FB" to the site column
plotCustomization[grep(rownames(plotCustomization), pattern = "PG"), "Site"] <- "PG" #For each rowname with "PG", add "PG" to the site column
plotCustomization[grep(rownames(plotCustomization), pattern = "SK"), "Site"] <- "SK" #For each rowname with "SK", add "SK" to the site column
plotCustomization[grep(rownames(plotCustomization), pattern = "WB"), "Site"] <- "WB" #For each rowname with "WB", add "WB" to the site column
head(plotCustomization) #Confirm changes
plotCustomization[grep(rownames(plotCustomization), pattern = "CIB"), "Habitat"] <- "Bare" #For each rowname with "CIB", add "Bare" to the habitat column
plotCustomization[grep(rownames(plotCustomization), pattern = "FBB"), "Habitat"] <- "Bare" #For each rowname with "FBB", add "Bare" to the habitat column
plotCustomization[grep(rownames(plotCustomization), pattern = "PGB"), "Habitat"] <- "Bare" #For each rowname with "PGB", add "Bare" to the habitat column
plotCustomization[grep(rownames(plotCustomization), pattern = "SKB"), "Habitat"] <- "Bare" #For each rowname with "SKB", add "Bare" to the habitat column
plotCustomization[grep(rownames(plotCustomization), pattern = "WBB"), "Habitat"] <- "Bare" #For each rowname with "WBB", add "Bare" to the habitat column
head(plotCustomization) #Confirm changes
plotCustomization[grep(rownames(plotCustomization), pattern = "CIE"), "Habitat"] <- "Eelgrass" #For each rowname with "CIE", add "Eelgrass" to the habitat column
plotCustomization[grep(rownames(plotCustomization), pattern = "FBE"), "Habitat"] <- "Eelgrass" #For each rowname with "FBE", add "Eelgrass" to the habitat column
plotCustomization[grep(rownames(plotCustomization), pattern = "PGE"), "Habitat"] <- "Eelgrass" #For each rowname with "PGE", add "Eelgrass" to the habitat column
plotCustomization[grep(rownames(plotCustomization), pattern = "SKE"), "Habitat"] <- "Eelgrass" #For each rowname with "SKE", add "Eelgrass" to the habitat column
plotCustomization[grep(rownames(plotCustomization), pattern = "WBE"), "Habitat"] <- "Eelgrass" #For each rowname with "WBE", add "Eelgrass" to the habitat column
head(plotCustomization) #Confirm changes
plotCustomization$Site.Habitat <- paste(plotCustomization$Site, "", plotCustomization$Habitat) #Combine "Site" and "Habitat" columns for Site.Habitat
head(plotCustomization) #Confirm changes
plotCustomization[grep(plotCustomization$Habitat, pattern = "Eelgrass"), "Shape"] <- 16 #Add 16 (filled circles) to the Shape column for each instance of "Eelgrass" in the Habitat column
plotCustomization[grep(plotCustomization$Habitat, pattern = "Bare"), "Shape"] <- 1 #Add 1 (open circles) to the Shape column for each instance of "Bare" in the Habitat column
head(plotCustomization) #Confirm changes
#pH
plotCustomization[grep(rownames(plotCustomization), pattern = "B.pH"), "Shape2"] <- 0 #Add 0 "open square" to the Shape2 column for each instance pH measurement from a bare habitat identified in the row names
plotCustomization[grep(rownames(plotCustomization), pattern = "E.pH"), "Shape2"] <- 22 #Add 22 "closed square" to the Shape2 column for each instance pH measurement from a bare habitat identified in the row names
#Dissolved oxygen
plotCustomization[grep(rownames(plotCustomization), pattern = "B.DO"), "Shape2"] <- 1 #Add 1 "open circle" to the Shape2 column for each instance pH measurement from a bare habitat identified in the row names
plotCustomization[grep(rownames(plotCustomization), pattern = "E.DO"), "Shape2"] <- 21 #Add 21 "closed circle" to the Shape2 column for each instance pH measurement from a bare habitat identified in the row names
#Salinity
plotCustomization[grep(rownames(plotCustomization), pattern = "B.sal"), "Shape2"] <- 5 #Add 5 "open diamond" to the Shape2 column for each instance pH measurement from a bare habitat identified in the row names
plotCustomization[grep(rownames(plotCustomization), pattern = "E.sal"), "Shape2"] <- 23 #Add 23 "closed diamond" to the Shape2 column for each instance pH measurement from a bare habitat identified in the row names
#Temperature
plotCustomization[grep(rownames(plotCustomization), pattern = "B.temp"), "Shape2"] <- 6 #Add 6 "open triangle" to the Shape2 column for each instance pH measurement from a bare habitat identified in the row names
plotCustomization[grep(rownames(plotCustomization), pattern = "E.temp"), "Shape2"] <- 25 #Add 25 "closed triangle" to the Shape2 column for each instance pH measurement from a bare habitat identified in the row names
tail(plotCustomization) #Confirm changes
plotCustomization[grep(plotCustomization$Site, pattern = "CI"), "Color"] <- "#00A9BD" #Add "#00A9BD" to the Color column for each instance of "CI" in the Site column
plotCustomization[grep(plotCustomization$Site, pattern = "FB"), "Color"] <- "#38001C" #Add "#38001C" to the Color column for each instance of "FB" in the Site column
plotCustomization[grep(plotCustomization$Site, pattern = "PG"), "Color"] <- "#440D82" #Add "#440D82" to the Color column for each instance of "PG" in the Site column
plotCustomization[grep(plotCustomization$Site, pattern = "SK"), "Color"] <- "#017A74" #Add "#017A74" to the Color column for each instance of "SK" in the Site column
plotCustomization[grep(plotCustomization$Site, pattern = "WB"), "Color"] <- "#EB8B0C" #Add "#EB8B0C" to the Color column for each instance of "WB" in the Site column
head(plotCustomization) #Confirm changes
fig.nmds <- ordiplot(meanData.log.gower.NMDS, choices=c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = plotCustomization$Color, pch = 16)
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "CI", col = "#00A9BD") #Add confidence ellipse around the data from Case Inlet
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "FB", col = "#38001C") #Add confidence ellipse around the data  from Fidalgo Bay
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "PG", col = "#440D82") #Add confidence ellipse around the data from Port Gamble Bay
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "SK", col = "#017A74") #Add confidence ellipse around the data from Skokomish River Delta
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "WB", col = "#EB8B0C") #Add confidence ellipse around the data from Willapa Bay
legend("topright", pch = c(rep(x = 16, times = 5)), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble Bay", "Skokomish River Delta", "Willapa Bay"), col=c('#00A9BD', '#38001C', '#440D82', '#017A74', '#EB8B0C'), cex = 0.5, bty = "n")
fig.nmds <- ordiplot(meanData.log.gower.NMDS, choices=c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = plotCustomization$Color, pch = 16)
ordihull(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "CI", col = "#00A9BD") #Add confidence ellipse around the data from Case Inlet
ordihull(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "FB", col = "#38001C") #Add confidence ellipse around the data  from Fidalgo Bay
ordihull(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "PG", col = "#440D82") #Add confidence ellipse around the data from Port Gamble Bay
ordihull(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "SK", col = "#017A74") #Add confidence ellipse around the data from Skokomish River Delta
ordihull(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "WB", col = "#EB8B0C") #Add confidence ellipse around the data from Willapa Bay
legend("topright", pch = c(rep(x = 16, times = 5)), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble Bay", "Skokomish River Delta", "Willapa Bay"), col=c('#00A9BD', '#38001C', '#440D82', '#017A74', '#EB8B0C'), cex = 0.5, bty = "n")
fig.nmds <- ordiplot(meanData.log.gower.NMDS, choices=c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = plotCustomization$Color, pch = plotCustomization$Shape)
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Habitat, show.groups = "Eelgrass", col = "grey80", lty = 1) #Add confidence ellipse around the data from eelgrass habitats
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Habitat, show.groups = "Bare", col = "grey80", lty = 2) #Add confidence ellipse around the data  from bare habitats
legend("topright", pch = c(rep(x = 1, times = 6), 16), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble Bay", "Skokomish River Delta", "Willapa Bay", "Bare", "Eelgrass"), col=c('#00A9BD', '#38001C', '#440D82', '#017A74', '#EB8B0C', "grey80", "grey80"), cex = 0.5, bty = "n")
fig.nmds <- ordiplot(meanData.log.gower.NMDS, choices=c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = plotCustomization$Color, pch = plotCustomization$Shape)
ordihull(meanData.log.gower.NMDS, plotCustomization$Habitat, show.groups = "Eelgrass", col = "grey80", lty = 1) #Add confidence ellipse around the data from eelgrass habitats
ordihull(meanData.log.gower.NMDS, plotCustomization$Habitat, show.groups = "Bare", col = "grey80", lty = 2) #Add confidence ellipse around the data  from bare habitats
legend("topright", pch = c(rep(x = 1, times = 6), 16), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble Bay", "Skokomish River Delta", "Willapa Bay", "Bare", "Eelgrass"), col=c('#00A9BD', '#38001C', '#440D82', '#017A74', '#EB8B0C', "grey80", "grey80"), cex = 0.5, bty = "n")
fig.nmds <- ordiplot(meanData.log.gower.NMDS, choices=c(1,2), type = "none", display = "sites", xlab = "", ylab = "", cex = 0.5, xaxt = "n", yaxt = "n") #Save NMDS as a new object
points(fig.nmds, "sites", col = plotCustomization$Color, pch = plotCustomization$Shape2, bg = plotCustomization$Color)
axis(side = 1, labels = TRUE, col = "grey80", cex.axis = 0.75)
mtext(side = 1, text = "NMDS1", line = 2)
axis(side = 2, labels = TRUE, col = "grey80", cex.axis = 0.75)
mtext(side = 2, text = "NMDS2", line = 2)
box(col = "grey80")
legend("topleft", pch = c(rep(x = 1, times = 6), 16, 0, 1, 5, 6), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble Bay", "Skokomish River Delta", "Willapa Bay", "Bare", "Eelgrass", "pH", "Dissolved Oxygen", "Salinity", "Temperature"), col=c('#00A9BD', '#38001C', '#440D82', '#017A74', '#EB8B0C', "black", "black", "black", "black", "black", "black"), cex = 0.4, bty = "n")
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "CI", col = "#00A9BD88") #Add confidence ellipse around the data from Case Inlet
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "FB", col = "#38001C88") #Add confidence ellipse around the data  from Fidalgo Bay
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "PG", col = "#440D8288") #Add confidence ellipse around the data from Port Gamble Bay
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "SK", col = "#017A7488") #Add confidence ellipse around the data from Skokomish River Delta
ordiellipse(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "WB", col = "#EB8B0C88") #Add confidence ellipse around the data from Willapa Bay
fig.nmds <- ordiplot(meanData.log.gower.NMDS, choices=c(1,2), type = "none", display = "sites", xlab = "Axis 1", ylab = "Axis 2", cex = 0.5) #Save NMDS as a new object
points(fig.nmds, "sites", col = plotCustomization$Color, pch = plotCustomization$Shape2, bg = plotCustomization$Color)
ordihull(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "CI", col = "#00A9BD") #Add confidence ellipse around the data from Case Inlet
ordihull(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "FB", col = "#38001C") #Add confidence ellipse around the data  from Fidalgo Bay
ordihull(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "PG", col = "#440D82") #Add confidence ellipse around the data from Port Gamble Bay
ordihull(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "SK", col = "#017A74") #Add confidence ellipse around the data from Skokomish River Delta
ordihull(meanData.log.gower.NMDS, plotCustomization$Site, show.groups = "WB", col = "#EB8B0C") #Add confidence ellipse around the data from Willapa Bay
legend("topright", pch = c(rep(x = 1, times = 6), 16, 0, 1, 5, 6), legend=c('Case Inlet', "Fidalgo Bay", "Port Gamble Bay", "Skokomish River Delta", "Willapa Bay", "Bare", "Eelgrass", "pH", "Dissolved Oxygen", "Salinity", "Temperature"), col=c('#00A9BD', '#38001C', '#440D82', '#017A74', '#EB8B0C', "black", "black", "black", "black", "black", "black"), cex = 0.5, bty = "n")
sigLoadings <- envfit(meanData.log.gower.NMDS$points, meanData.log.trans[,c(1:3, 5, 18:19)], perm = 1000, na.rm = TRUE) #Only calculate loadings simper identified as driving differences between FB-WB and SK-WB. See ANOSIM section for simper results.
sigLoadings #View loadings
fig.nmds <- ordiplot(meanData.log.gower.NMDS, choices=c(1,2), type = "none", display = "sites", xlab = "", ylab = "", cex = 0.5, xaxt = "n", yaxt = "n") #Save NMDS as a new object
plot(sigLoadings, col = 'grey20') #Plot loadings that simper determined were significant
axis(side = 1, labels = TRUE, col = "grey80", cex.axis = 0.75)
mtext(side = 1, text = "NMDS1", line = 2)
axis(side = 2, labels = TRUE, col = "grey80", cex.axis = 0.75)
mtext(side = 2, text = "NMDS2", line = 2)
box(col = "grey80")
siteANOSIM <- anosim(meanData.log.trans, grouping = plotCustomization$Site) #One-way ANOSIM by Site
siteANOSIM$statistic #R = -0.07799145
siteANOSIM$signif #p = 0.968
plot(siteANOSIM) #Obtain boxplots and permutation test histogram
habitatANOSIM <- anosim(meanData.log.trans, grouping = plotCustomization$Habitat) #One-way ANOSIM by Habitat
habitatANOSIM$statistic #R = -0.03833658
habitatANOSIM$signif #p = 0.925
plot(habitatANOSIM) #Obtain boxplots and permutation test histogram
siteAndHabitatANOSIM <- anosim(meanData.log.trans, grouping = plotCustomization$Site.Habitat) #Two-way ANOSIM by Site and Habitat
siteAndHabitatANOSIM$statistic #R = -0.2203411
siteAndHabitatANOSIM$signif #p = 1
plot(siteAndHabitatANOSIM) #Obtain boxplots and permutation test histogram
plotCustomization$EnvironmentalVariable <- rep(0, times = length(plotCustomization$Site))
plotCustomization[grep(rownames(plotCustomization), pattern = "pH"), "EnvironmentalVariable"] <- "pH"
plotCustomization[grep(rownames(plotCustomization), pattern = "DO"), "EnvironmentalVariable"] <- "DO"
plotCustomization[grep(rownames(plotCustomization), pattern = "sal"), "EnvironmentalVariable"] <- "S"
plotCustomization[grep(rownames(plotCustomization), pattern = "temp"), "EnvironmentalVariable"] <- "T"
tail(plotCustomization)
environmentalVariableANOSIM <- anosim(meanData.log.trans, grouping = plotCustomization$EnvironmentalVariable) #One-way ANOSIM by Environmental Variable
environmentalVariableANOSIM$statistic #R = 0.8339003
environmentalVariableANOSIM$signif #p = 0.001
plot(environmentalVariableANOSIM) #Obtain boxplots and permutation test histogram
plotCustomization$EnvVariable.Site <- paste(plotCustomization$EnvironmentalVariable, "", plotCustomization$Site) #Combine Environmental Variable and Site
environmentalVariableSiteANOSIM <- anosim(meanData.log.trans, grouping = plotCustomization$EnvVariable.Site) #Two-way ANOSIM by Environmental Variable and Site
environmentalVariableSiteANOSIM$statistic #R = 0.7675
environmentalVariableSiteANOSIM$signif #p = 0.001
plot(environmentalVariableSiteANOSIM) #Obtain boxplots and permutation test histogram
plotCustomization$EnvVariable.Habitat <- paste(plotCustomization$EnvironmentalVariable, "", plotCustomization$Habitat) #Combine Environmental Variable and Habitat
environmentalVariableHabitatANOSIM <- anosim(meanData.log.trans, grouping = plotCustomization$EnvVariable.Habitat) #Two-way ANOSIM by Environmental Variable and Habitat
environmentalVariableHabitatANOSIM$statistic #R = 0.698505
environmentalVariableHabitatANOSIM$signif #p = 0.001
plot(environmentalVariableHabitatANOSIM) #Obtain boxplots and permutation test histogram
pairwiseData <- merge(x = meanData.log.trans, y = plotCustomization, by = "row.names") #Merge dataframes
rownames(pairwiseData) <- pairwiseData$Row.names #Make the column the rownames
pairwiseData <- pairwiseData[, -1] #Remove Sample.Number column
head(pairwiseData) #Confirm merge
datapH <- pairwiseData[grep(rownames(pairwiseData), pattern = "pH"),] #Subset data
head(datapH) #Confirm subset
pHHabitatANOSIM <- anosim(datapH[,1:31], grouping = datapH$Habitat) #Conduct ANOSIM
pHHabitatANOSIM$statistic #R = 0.2125
pHHabitatANOSIM$signif #p = 0.135
plot(pHHabitatANOSIM) #Obtain boxplots and permutation test histogram
dataDO <- pairwiseData[grep(rownames(pairwiseData), pattern = "DO"),] #Subset data
head(dataDO) #Confirm subset
DOHabitatANOSIM <- anosim(dataDO[,1:31], grouping = dataDO$Habitat) #Conduct ANOSIM
DOHabitatANOSIM$statistic #R = -0.14375
DOHabitatANOSIM$signif #p = 0.922
plot(DOHabitatANOSIM) #Obtain boxplots and permutation test histogram
dataSalinity <- pairwiseData[grep(rownames(pairwiseData), pattern = "sal"),] #Subset data
head(dataSalinity) #Confirm subset
salinityHabitatANOSIM <- anosim(dataSalinity[,1:31], grouping = dataSalinity$Habitat) #Conduct ANOSIM
salinityHabitatANOSIM$statistic #R = -0.1666667
salinityHabitatANOSIM$signif #p = 0.971
plot(salinityHabitatANOSIM) #Obtain boxplots and permutation test histogram
dataTemperature <- pairwiseData[grep(rownames(pairwiseData), pattern = "temp"),] #Subset data
head(dataTemperature) #Confirm subset
temperatureHabitatANOSIM <- anosim(dataTemperature[,1:31], grouping = dataTemperature$Habitat) #Conduct ANOSIM
temperatureHabitatANOSIM$statistic #R = -0.192
temperatureHabitatANOSIM$signif #p = 0.905
plot(temperatureHabitatANOSIM) #Obtain boxplots and permutation test histogram
pHSiteANOSIM <- anosim(datapH[,1:31], grouping = datapH$Site) #Conduct ANOSIM
pHSiteANOSIM$statistic #R = 0.328125
pHSiteANOSIM$signif #p = 0.151
plot(pHSiteANOSIM) #Obtain boxplots and permutation test histogram
DOSiteANOSIM <- anosim(dataDO[,1:31], grouping = dataDO$Site) #Conduct ANOSIM
DOSiteANOSIM$statistic #R = 0.40625
DOSiteANOSIM$signif #p = 0.053
plot(DOSiteANOSIM) #Obtain boxplots and permutation test histogram
simperDOSite <- simper(dataDO[,1:31], group = dataDO$Site) #Identify what could be driving significant differences
summary(simperDOSite)
salinitySiteANOSIM <- anosim(dataSalinity[,1:31], grouping = dataSalinity$Site) #Conduct ANOSIM
salinitySiteANOSIM$statistic #R = -0.01333333
salinitySiteANOSIM$signif #p = 0.482
plot(salinitySiteANOSIM) #Obtain boxplots and permutation test histogram
temperatureSiteANOSIM <- anosim(dataTemperature[,1:31], grouping = dataTemperature$Site) #Conduct ANOSIM
temperatureSiteANOSIM$statistic #R = 1
temperatureSiteANOSIM$signif #p = 0.002
plot(temperatureSiteANOSIM) #Obtain boxplots and permutation test histogram
simperTemperatureSite <- simper(dataTemperature[,1:31], group = dataTemperature$Site) #Identify what could be driving significant differences
summary(simperTemperatureSite)
knitr::opts_chunk$set(echo = TRUE)
pHData <- read.csv("2018-11-18-pH-Tide-Data-Corrected.csv", header = TRUE, na.strings = "NA")
pHData <- pHData[, -1] #Remove first column of redundant values
head(pHData)
knitr::opts_chunk$set(echo = TRUE)
sessionInfo()
pHData <- read.csv("2018-11-18-pH-Tide-Data-Corrected.csv", header = TRUE, na.strings = "NA")
pHData <- pHData[, -1] #Remove first column of redundant values
head(pHData)
DOData <- read.csv("2018-11-18-DO-Tide-Data-Corrected.csv", header = TRUE, na.strings = "NA")
DOData <- DOData[, -1] #Remove first column of redundant values
head(DOData)
salinityData <- read.csv("2018-11-18-Salinity-Tide-Data-Corrected.csv", header = TRUE, na.strings = "NA")
salinityData <- salinityData[, -1] #Remove first column of redundant values
head(salinityData)
temperatureData <- read.csv("2018-11-18-Temperature-Corrected.csv", header = TRUE, na.strings = "NA")
temperatureData <- temperatureData[, -1] #Remove first column of redundant values
head(temperatureData)
pHMin <- as.integer((min(pHData[, -c(1:3, 13:17)], na.rm = TRUE))) #Calculate minimum
pHMax <- as.integer((max(pHData[, -c(1:3, 13:17)], na.rm = TRUE))+1) #Calculate maximum
pHRange <- c(pHMin, pHMax) #Create range values
DOMin <- as.integer((min(DOData[, -c(1:3, 14:18)], na.rm = TRUE)))
DOMax <- as.integer((max(DOData[, -c(1:3, 14:18)], na.rm = TRUE)))
DORange <- c(DOMin, DOMax)
salinityMin <- as.integer((min(salinityData[, -c(1:3, 12:16)], na.rm = TRUE)))
salinityMax <- as.integer((max(salinityData[, -c(1:3, 12:16)], na.rm = TRUE)))
salinityRange <- c(salinityMin, salinityMax)
temperatureMin <- as.integer((min(temperatureData[, -c(1:2, 13)], na.rm = TRUE)))
temperatureMax <- as.integer((max(temperatureData[, -c(1:2, 13)], na.rm = TRUE)))
temperatureRange <- c(temperatureMin, temperatureMax)
temperatureAxisDates <- c("6/19", "6/24", "6/29", "7/04", "7/09", "7/14", "7/19") #Isolate dates for x-axis
#pdf("2018-11-20-Environmental-Data-Line-Graph.pdf", width = 11, height = 8.5) #Save as a new file
par(mfrow = c(4, 5), oma = c(6, 4, 3, 1), mar = c(0, 1.5, 0, 0)) #Create a 4x5 multipanel plot, filling in the rows first. Add space along certain outer and inner margins.
#Temperature
plot(temperatureData$CIB, xaxs = "i", yaxs = "i", axes = F, ann = F, xlim = c(1, 4896), ylim = temperatureRange, pch = 16, cex = 0.2, col = "#00A9BD") #Case Inlet bare
lines(temperatureData$CIE, lty = 3, col = "grey50") #Case Inlet eelgrass
mtext(side = 3, line = -1.5, adj = 0, text = "Unvegetated", cex = 1, col = "#00A9BD") #Add habitat specificiation name. Use adj = 1 to left-justify the text
mtext(side = 3, line = -2.75, adj = 0, text = "Eelgrass", cex = 1, col = "grey50") #Add habitat specificiation name. Use adj = 1 to left-justify the text
box(col = "grey80")
axis(side = 2, las = 1, at = c(15, 35), col = "grey80") #Put the axis labels at the values specified
mtext(side = 2, line = 3, "Temperature (ºC)") #Add environmental variable indication
mtext(side = 3, line = 1, "Case Inlet") #Add site indication
plot(temperatureData$FBB, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = temperatureRange, pch = 16, cex = 0.2, col = "#38001C") #Fidalgo Bay bare
lines(temperatureData$FBE, lty = 3, col = "grey50") #Eelgrass
mtext(side = 3, line = -1.5, adj = 0, text = "Unvegetated", cex = 1, col = "#38001C") #Add habitat specificiation name. Use adj = 1 to left-justify the text
mtext(side = 3, line = -2.75, adj = 0, text = "Eelgrass", cex = 1, col = "grey50") #Add habitat specificiation name. Use adj = 1 to left-justify the text
box(col = "grey80")
mtext(side = 3, line = 1, "Fidalgo Bay") #Add site indication
plot(temperatureData$PGB, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = temperatureRange, pch = 16, cex = 0.2, col = "#440D82") #Port Gamble bare
lines(temperatureData$PGE, lty = 3, col = "grey50") #Eelgrass
mtext(side = 3, line = -1.5, adj = 0, text = "Unvegetated", cex = 1, col = "#440D82") #Add habitat specificiation name. Use adj = 1 to left-justify the text
mtext(side = 3, line = -2.75, adj = 0, text = "Eelgrass", cex = 1, col = "grey50") #Add habitat specificiation name. Use adj = 1 to left-justify the text
box(col = "grey80")
mtext(side = 3, line = 1, "Port Gamble Bay") #Add site indication
plot(temperatureData$SKB, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = temperatureRange, pch = 16, cex = 0.2, col = "#017A74") #Skokomish River bare
lines(temperatureData$SKE, lty = 3, col = "grey50") #Eelgrass
mtext(side = 3, line = -1.5, adj = 0, text = "Unvegetated", cex = 1, col = "#017A74") #Add habitat specificiation name. Use adj = 1 to left-justify the text
mtext(side = 3, line = -2.75, adj = 0, text = "Eelgrass", cex = 1, col = "grey50") #Add habitat specificiation name. Use adj = 1 to left-justify the text
box(col = "grey80")
mtext(side = 3, line = 1, "Skokomish River Delta") #Add site indication
plot(temperatureData$WBB, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = temperatureRange, pch = 16, cex = 0.2, col = "#EB8B0C") #Willapa Bay bare
lines(temperatureData$WBE, lty = 3, col = "grey50") #Eelgrass
mtext(side = 3, line = -1.5, adj = 0, text = "Unvegetated", cex = 1, col = "#EB8B0C") #Add habitat specificiation name. Use adj = 1 to left-justify the text
mtext(side = 3, line = -2.75, adj = 0, text = "Eelgrass", cex = 1, col = "grey50") #Add habitat specificiation name. Use adj = 1 to left-justify the text
box(col = "grey80")
mtext(side = 3, line = 1, "Willapa Bay") #Add site indication
#pH data
plot(pHData$CIB.pH, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = pHRange, pch = 16, cex = 0.2, col = "#00A9BD") #Case Inlet bare
lines(pHData$CIE.pH, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
axis(side = 2, las = 1, at = c(7.5, 8.5), col = "grey80") #Put the axis labels at the values specified
mtext(side = 2, line = 3, "pH") #Add environmental variable indication
plot(pHData$FBB.pH, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = pHRange, pch = 16, cex = 0.2, col = "#38001C") #Fidalgo Bay bare
lines(pHData$FBE.pH, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
plot(pHData$PGB.pH, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = pHRange, pch = 16, cex = 0.2, col = "#440D82") #Port Gamble bare
box(col = "grey80")
plot(pHData$SKB.pH, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = pHRange, pch = 16, cex = 0.2, col = "#017A74") #Skokomish River bare
lines(pHData$SKE.pH, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
plot(pHData$WBB.pH, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = pHRange, pch = 16, cex = 0.2, col = "#EB8B0C") #Willapa Bay bare
lines(pHData$WBE.pH, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
#Salinity
plot(salinityData$CIB.Salinity, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = salinityRange, pch = 16, cex = 0.2, col = "#00A9BD") #Case Inlet bare
lines(salinityData$CIE.Salinity, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
axis(side = 2, las = 1, at = c(15, 25), col = "grey50") #Put the axis labels at the values specified
mtext(side = 2, line = 3, "Salinity (PSU)") #Add environmental variable indication
plot(salinityData$FBB.Salinity, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = salinityRange, pch = 16, cex = 0.2, col = "#38001C") #Fidalgo Bay bare
lines(salinityData$FBE.Salinity, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
plot(salinityData$PGE.Salinity, type = "l", lty = 3, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = salinityRange, col = "grey80") #Port Gamble Bay bare
lines(salinityData$PGE.Salinity, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
plot(salinityData$SKB.Salinity, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = salinityRange, pch = 16, cex = 0.2, col = "#017A74") #Skokomish River bare
lines(salinityData$SKE.Salinity, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
plot(salinityData$WBB.Salinity, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = salinityRange, pch = 16, cex = 0.2, col = "#EB8B0C") #Willapa Bay bare
box(col = "grey80")
#Dissolved oxygen
plot(DOData$CIB.DO, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = DORange, pch = 16, cex = 0.2, col = "#00A9BD") #Case Inlet bare
lines(DOData$CIE.DO, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
axis(side = 2, las = 1, at = c(25, 45), col = "grey80") #Put the axis labels at the values specified
mtext(side = 2, line = 3, "DO (mg/L)") #Add environmental variable indication
axis(side = 1, at = seq(from = 1, to = length(temperatureData$Date), by = 144*5), lab = temperatureAxisDates, las = 3, col = "grey80") #Make x-axis
plot(DOData$FBB.DO, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = DORange, pch = 16, cex = 0.2, col = "#38001C") #Fidalgo Bay bare
lines(DOData$FBE.DO, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
axis(side = 1, at = seq(from = 1, to = length(temperatureData$Date), by = 144*5), lab = temperatureAxisDates, las = 3, col = "grey80") #Make x-axis
plot(DOData$PGB.DO, xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = DORange, pch = 16, cex = 0.2, col = "#440D82") #Port Gamble bare
lines(DOData$PGE.DO, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
axis(side = 1, at = seq(from = 1, to = length(temperatureData$Date), by = 144*5), lab = temperatureAxisDates, las = 3, col = "grey80") #Make x-axis
plot(DOData$SKB.DO, type = "l", xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = DORange, pch = 16, cex = 0.2, col = "#017A74") #Skokomish River bare
lines(DOData$SKE.DO, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
axis(side = 1, at = seq(from = 1, to = length(temperatureData$Date), by = 144*5), lab = temperatureAxisDates, las = 3, col = "grey80") #Make x-axis
plot(DOData$WBB.DO, type = "l", xaxs = "i", yaxs = "i", axes = F, ann = F, ylim = DORange, pch = 16, cex = 0.2, col = "#EB8B0C") #Willapa Bay bare
lines(DOData$WBE.DO, lty = 3, col = "grey50") #Eelgrass
box(col = "grey80")
axis(side = 1, at = seq(from = 1, to = length(temperatureData$Date), by = 144*5), lab = temperatureAxisDates, las = 2, col = "grey80") #Make x-axis
mtext(side = 1, outer = TRUE, line = 4, "Date") #Add x-axis label
#dev.off()
